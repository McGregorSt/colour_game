{"version":3,"sources":["components/GameField/PointsCounter/PointsCounter.css","App.css","components/GameField/GameBoard/ColorSq/ColorSq.css","components/GameField/GameBoard/GameBoard.css","components/GameField/GameField.css","serviceWorker.js","components/GameField/GameBoard/ColorSq/ColorSq.js","store/actions/actions.js","store/actions/actionTypes.js","components/GameField/GameBoard/GameBoard.js","components/GameField/PointsCounter/PointsCounter.js","components/GameField/GameField.js","App.js","store/utility.js","store/reducers/reducer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ColorSq","x","y","color","value","clicked","className","classes","style","background","onClick","data-value","data-color","colorGenerator","colors","random","Math","ceil","checkNeighbours","ev","board","dispatch","getState","clickedSquare","target","dataset","neighbours","goodNeighbours","checkGoodNeighbours","checkSq","down","filter","elm","corX","corY","up","left","right","push","searchingSteps","forEach","toDelete","map","val","ind","arr","indexOf","sort","a","b","counter","type","checkNeighboursSuccess","corYArr","yCount","reduce","obj","item","toMove","lastY","i","movingSq","sq","squaresToMove","toEmpty","modifiedToMove","drop","square","Object","entries","count","parseInt","howFar","newCorX","el","newSquares","newColor","toRegenerate","GameBoard","this","props","onGenerateBoard","renderBoard","id","key","onCheckNeighbours","Component","connect","state","newBoard","j","randomColor","newSq","actions","PointsCounter","EmptyDiv","Points","GameField","App","updateObject","prevObject","currObject","initialState","generateBoard","action","updateCounter","length","squaresToRegenerate","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70c73759.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"PointsCounter\":\"PointsCounter__PointsCounter__1vy7E\",\"EmptyDiv\":\"PointsCounter__EmptyDiv__23S47\",\"Points\":\"PointsCounter__Points__2MjUN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__1o-Fp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorSq\":\"ColorSq__ColorSq__1ckq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard__GameBoard__2n7Zv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameField\":\"GameField__GameField__34e9w\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nimport classes from './ColorSq.css'\r\n\r\nconst ColorSq = ({ x, y, color, value, clicked }) => {\r\n  return (\r\n    <div\r\n      className={classes.ColorSq}\r\n      x={x}\r\n      y={y}\r\n      style={{ background: `${color}` }}\r\n      onClick={clicked}\r\n      data-value={value}\r\n      data-color={color}\r\n    >\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorSq\r\n","import * as actionTypes from './actionTypes'\r\n\r\nexport const generateBoardSuccess = board => {\r\n  return {\r\n    type: actionTypes.GENERATE_BOARD,\r\n    board: board,\r\n  }\r\n}\r\n\r\nexport const checkNeighboursSuccess = (neighbours, clicked, counter) => {\r\n  return {\r\n    type: actionTypes.CHECK_NEIGHBOURS,\r\n    neighbours: neighbours,\r\n    clicked: clicked,\r\n    counter: counter,\r\n  }\r\n}\r\n\r\nexport const squaresToMove = toMove => {\r\n  return {\r\n    type: actionTypes.SQUARES_TO_MOVE,\r\n    toMove: toMove,\r\n  }\r\n}\r\n\r\nexport const squaresToRegenerate = toRegenerate => {\r\n  return {\r\n    type: actionTypes.SQUARES_TO_REGENERATE,\r\n    toRegenerate: toRegenerate,\r\n  }\r\n}\r\n\r\nconst colorGenerator = colors => {\r\n  let random = Math.ceil(Math.random() * 5)\r\n  return `#${colors[random - 1]}`\r\n}\r\n\r\nexport const generateBoard = () => {\r\n  return (dispatch, getState) => {\r\n    const colors = getState().colors\r\n\r\n    let newBoard = []\r\n    for (let i = 0; i < 5; i++) {\r\n      for (let j = 0; j < 10; j++) {\r\n        let randomColor = colorGenerator(colors)\r\n        let newSq = {\r\n          corX: i,\r\n          corY: j,\r\n          color: `${randomColor}`,\r\n        }\r\n        newBoard.push(newSq)\r\n      }\r\n    }\r\n    return dispatch(generateBoardSuccess(newBoard))\r\n  }\r\n}\r\n\r\nexport const checkNeighbours = (ev, board) => {\r\n  return (dispatch, getState) => {\r\n    const colors = getState().colors\r\n\r\n    let clickedSquare = board[ev.target.dataset.value]\r\n    let neighbours = []\r\n    let goodNeighbours = []\r\n\r\n    const checkGoodNeighbours = checkSq => {\r\n      let down = board.filter(\r\n        elm => elm.corX === checkSq.corX + 1 && elm.corY === checkSq.corY\r\n      )\r\n      let up = board.filter(\r\n        elm => elm.corX === checkSq.corX - 1 && elm.corY === checkSq.corY\r\n      )\r\n      let left = board.filter(\r\n        elm => elm.corX === checkSq.corX && elm.corY === checkSq.corY - 1\r\n      )\r\n      let right = board.filter(\r\n        elm => elm.corX === checkSq.corX && elm.corY === checkSq.corY + 1\r\n      )\r\n\r\n      if (checkSq.corX === 0 && checkSq.corY === 0) {\r\n        neighbours.push(right, down)\r\n      } else if (checkSq.corX === 0 && checkSq.corY === 9) {\r\n        neighbours.push(left, down)\r\n      } else if (checkSq.corX === 4 && checkSq.corY === 0) {\r\n        neighbours.push(right, up)\r\n      } else if (checkSq.corX === 4 && checkSq.corY === 9) {\r\n        neighbours.push(left, up)\r\n      } else if (checkSq.corX === 0) {\r\n        neighbours.push(right, down, left)\r\n      } else if (checkSq.corX === 4) {\r\n        neighbours.push(right, up, left)\r\n      } else if (checkSq.corY === 0) {\r\n        neighbours.push(up, down, right)\r\n      } else if (checkSq.corY === 9) {\r\n        neighbours.push(left, down, up)\r\n      } else {\r\n        neighbours.push(up, right, down, left)\r\n      }\r\n\r\n      goodNeighbours = neighbours.filter(elm => elm[0].color === checkSq.color)\r\n\r\n      return goodNeighbours\r\n    }\r\n\r\n    checkGoodNeighbours(clickedSquare)\r\n\r\n    let searchingSteps = 4\r\n    while (searchingSteps > 0) {\r\n      goodNeighbours.forEach(elm => {\r\n        checkGoodNeighbours(elm[0])\r\n      })\r\n      searchingSteps -= 1\r\n    }\r\n\r\n    const toDelete = [...goodNeighbours]\r\n      .map(elm => elm[0])\r\n      .filter((val, ind, arr) => arr.indexOf(val) === ind)\r\n      .sort((a, b) => a.corX - b.corX)\r\n      .sort((a, b) => a.corY - b.corY)\r\n\r\n    dispatch(checkNeighboursSuccess(toDelete, clickedSquare))\r\n\r\n    const corYArr = []\r\n    toDelete.forEach(elm => corYArr.push(elm.corY))\r\n\r\n    let yCount = corYArr.reduce((obj, item) => {\r\n      if (!obj[item]) {\r\n        obj[item] = 0\r\n      }\r\n      obj[item]++\r\n      return obj\r\n    }, {})\r\n\r\n    const toMove = []\r\n\r\n    let lastY = -1\r\n    toDelete.forEach(elm => {\r\n      if (elm.corY > lastY) {\r\n        for (let i = 0; i < elm.corX; i++) {\r\n          let movingSq = board.filter(\r\n            sq => sq.corX === i && sq.corY === elm.corY\r\n          )\r\n          toMove.push(...movingSq)\r\n        }\r\n        lastY = elm.corY\r\n      }\r\n    })\r\n\r\n    dispatch(squaresToMove(toMove))\r\n\r\n    const howFar = square => {\r\n      const entries = Object.entries(yCount)\r\n      for (let [y, count] of entries) {\r\n        if (parseInt(y) === square.corY) {\r\n          return count\r\n        }\r\n      }\r\n    }\r\n\r\n    const toEmpty = []\r\n    const modifiedToMove = []\r\n\r\n    toMove.forEach(elm => {\r\n      let drop = howFar(elm)\r\n      toEmpty.push(drop)\r\n      let newCorX = elm.corX + drop\r\n      modifiedToMove.push({\r\n        corX: newCorX,\r\n        corY: elm.corY,\r\n        color: elm.color,\r\n      })\r\n    })\r\n\r\n    board.map(elm =>\r\n      modifiedToMove.forEach(el => {\r\n        if (elm.corX === el.corX && elm.corY === el.corY) {\r\n          elm.color = el.color\r\n        }\r\n      })\r\n    )\r\n\r\n    lastY = -1\r\n    let newSquares = []\r\n    toDelete.forEach(elm => {\r\n      // debugger\r\n      if (elm.corY > lastY) {\r\n        for (let i = 0; i < yCount[elm.corY]; i++) {\r\n          newSquares.push({\r\n            corX: i,\r\n            corY: elm.corY,\r\n            color: '',\r\n          })\r\n        }\r\n        lastY = elm.corY\r\n      }\r\n    })\r\n\r\n    const regeneratingSquares = field => {\r\n      field.forEach(elm => {\r\n        let newColor = colorGenerator(colors)\r\n        elm.color = newColor\r\n      })\r\n    }\r\n\r\n    regeneratingSquares(newSquares)\r\n\r\n    board.forEach(elm => {\r\n      newSquares.forEach(el => {\r\n        if (elm.corX === el.corX && elm.corY === el.corY) {\r\n          elm.color = el.color\r\n        }\r\n      })\r\n    })\r\n\r\n    board.sort((a, b) => a.corY - b.corY).sort((a, b) => a.corX - b.corX)\r\n\r\n    dispatch(squaresToRegenerate(newSquares))\r\n  }\r\n}\r\n","export const GENERATE_BOARD = 'GENERATE_BOARD'\r\nexport const CHECK_NEIGHBOURS = 'CHECK_NEIGHBOURS'\r\nexport const SQUARES_TO_MOVE = 'SQUARES_TO_MOVE'\r\nexport const SQUARES_TO_REGENERATE = 'SQUARES_TO_REGENERATE'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport ColorSq from './ColorSq/ColorSq'\r\nimport classes from './GameBoard.css'\r\nimport * as actions from '../../../store/actions/index'\r\n\r\nclass GameBoard extends Component {\r\n  componentDidMount() {\r\n    this.props.onGenerateBoard()\r\n  }\r\n\r\n  render() {\r\n    let renderBoard = this.props.board.map((sq, id) => {\r\n      return (\r\n        <ColorSq\r\n          key={id}\r\n          x={sq.corX}\r\n          y={sq.corY}\r\n          color={sq.color}\r\n          value={id}\r\n          clicked={ev => this.props.onCheckNeighbours(ev, this.props.board)}\r\n        />\r\n      )\r\n    })\r\n\r\n    return <div className={classes.GameBoard}>{renderBoard}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    board: state.board,\r\n    neighbours: state.neighbours,\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onGenerateBoard: () => dispatch(actions.generateBoard()),\r\n    onCheckNeighbours: (ev, board) =>\r\n      dispatch(actions.checkNeighbours(ev, board)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameBoard)\r\n","import React from 'react'\r\n\r\nimport classes from './PointsCounter.css'\r\n\r\nconst PointsCounter = ({ counter }) => {\r\n  return (\r\n    <div className={classes.PointsCounter} counter={counter}>\r\n      <div className={classes.EmptyDiv}></div>\r\n      <div className={classes.Points}>\r\n        Your score: <strong> {counter} </strong>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PointsCounter\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport GameBoard from './GameBoard/GameBoard'\r\nimport classes from './GameField.css'\r\nimport PointsCounter from './PointsCounter/PointsCounter'\r\n\r\nclass GameField extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.GameField}>\r\n        <GameBoard />\r\n        <PointsCounter counter={this.props.counter} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    counter: state.counter,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(GameField)\r\n","import React from 'react'\n\nimport classes from './App.css'\nimport GameField from './components/GameField/GameField'\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <GameField />\n    </div>\n  )\n}\n\nexport default App\n","export const updateObject = (prevObject, currObject) => {\r\n  return {\r\n    ...prevObject,\r\n    ...currObject\r\n  }\r\n}\r\n","import * as actionTypes from '../actions/actionTypes'\r\nimport { updateObject } from '../utility'\r\n\r\nconst initialState = {\r\n  colors: ['8b1e3f', '3c153b', '89bd9e', 'f0c987', 'db4c40'],\r\n  board: [],\r\n  clicked: null,\r\n  counter: 0,\r\n  neighbours: [],\r\n  toMove: [],\r\n  toRegenerate: [],\r\n}\r\n\r\nconst generateBoard = (state, action) => {\r\n  return updateObject(state, {\r\n    board: action.board,\r\n  })\r\n}\r\nconst checkNeighbours = (state, action) => {\r\n  const updateCounter = state.counter + action.neighbours.length\r\n  return updateObject(state, {\r\n    neighbours: action.neighbours,\r\n    clicked: action.clicked,\r\n    counter: updateCounter,\r\n  })\r\n}\r\nconst squaresToMove = (state, action) => {\r\n  return updateObject(state, {\r\n    toMove: action.toMove,\r\n  })\r\n}\r\nconst squaresToRegenerate = (state, action) => {\r\n  return updateObject(state, {\r\n    toRegenerate: action.toRegenerate,\r\n  })\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GENERATE_BOARD:\r\n      return generateBoard(state, action)\r\n    case actionTypes.CHECK_NEIGHBOURS:\r\n      return checkNeighbours(state, action)\r\n    case actionTypes.SQUARES_TO_MOVE:\r\n      return squaresToMove(state, action)\r\n    case actionTypes.SQUARES_TO_REGENERATE:\r\n      return squaresToRegenerate(state, action)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport reducer from './store/reducers/reducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}